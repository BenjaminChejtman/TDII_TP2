#include <stdio.h>
#include <stdlib.h>

//#######################################################################################

struct keysPredict {
    struct node* first;
    int totalKeys;
    int totalWords;
};

struct node {
    char character;
    struct node* next;
    int end;
    char* word;
    struct node* down;
};

//#######################################################################################

struct keysPredict* keysPredictNew() {
    struct keysPredict* kt = (struct keysPredict*)malloc(sizeof(struct keysPredict));
    kt->first = 0;
    kt->totalKeys = 0;
    kt->totalWords = 0;
    return kt;
}

struct node* nodeNew(char character){
    struct node* n = (struct node*)malloc(sizeof(struct node));
    n->character = character;
    n->next = NULL;
    n->end = 0;
    n->word = NULL;
    n->down = NULL;
    return n;
}

//#######################################################################################

int strLen(char* src) {
  int len = 0;
  while (src[len] != 0)
  {
    len++;
  }
  return len;
}


char* strDup(char* src) { //fijarse si agregar eso de que no hay espacio disponible que me mande por whatsapp

  int length = strLen(src);
  char* dup = (char*)malloc(sizeof(char)*(length)+1);

  for(int i = 0; i < length; i++){
    dup[i] = src[i];
  }

  dup[length] = 0;
  return dup;
}

struct node* findNodeInLevel(struct node** list, char character) {
    if (*list == NULL){ //verificamos si la lista esta vacia
      return NULL;
    }
    else{
      struct node* curr = *list;
      while (curr != NULL){
        if(curr->character == character){
          return curr;
        }
        curr = curr->next; //como nuestra nueva froma de hacer i++;
      }
      return NULL;
    }
}

struct node* addSortedNewNodeInLevel(struct node** list, char character) {
    struct node* newNode = nodeNew(character);

    if (*list == NULL || (*list)->character > character) //nos fijamos si la lista esta vacia o si el nuevo nodo deberia ser el primero en orden alfabetico
    {
        newNode->next = *list;
        *list = newNode;
    }

    else
    {
        struct node* curr = *list; //empezamos con el primer nodo
        while (curr->next != NULL && curr->next->character < character)
        {
            curr = curr->next;
        }
        newNode->next = curr->next;
        curr->next = newNode;
    }

    return *list;
}

void deleteArrayOfWords(char** words, int wordsCount) {
    for (int i = 0; i < wordsCount; i++){
      free(words[i]);
    }
    free(words);
}

void keysPredictAddWord(struct keysPredict* kt, char* word) {
    struct node* curr = kt->first; // Empezamos por el primer nodo
    char first = curr->character;
    int cantKeysBefore = kt->totalKeys;

    for (int i = 0; i < strLen(word); i++) {
        struct node* found = findNodeInLevel(&curr, word[i]);

        if (found != NULL) { // Si se encontró...
            curr = found; // Actualizamos curr para apuntar al nodo encontrado
            if (i == strLen(word) - 1) { // Si ya agregamos todas las letras de word...
                curr->end = 1; // Ponemos que este el nodo final de nuestra palabra
                curr->word = strDup(word); // Agregamos la palabra completa a word
            }
        } else { // Si no se encontró el caracter lo agregamos
            kt->totalKeys++; // Agregamos 1 por el caracter nuevo que agregamos
            struct node* new = addSortedNewNodeInLevel(&curr, word[i]); // Agregamos el nuevo caracter donde corresponde
            curr = new; // Después de agregar la letra en su nivel correspondiente, bajamos de nivel

            if (i == 0 && word[i] < first) { // En caso de que sea la primer letra hasta ahora hacemos que el first apunte a este nodo
                kt->first = new;
            }

            if (i == strLen(word) - 1) { // Si ya agregamos todas las letras de word...
                new->end = 1; // Ponemos que este el nodo final de nuestra palabra
                new->word = strDup(word); // Agregamos la palabra completa a word
            }
        }
    }

    // Después de agregar la palabra, en caso de ser una nueva, aumentamos en uno la cantidad de totalWords
    if (cantKeysBefore < kt->totalKeys) { // Nos fijamos si ahora tenemos más nodos en cualquier nivel en total, lo que nos indicará que se necesitó alguna letra para agregar una palabra nueva
        kt->totalWords++;
    }
}


void keysPredictRemoveWord(struct keysPredict* kt, char* word) {
  struct node* curr = kt->first;

  for(int i = 0; i < strLen(word); i++)
  {

    struct node* found = findNodeInLevel(&curr, word[i]);
    printf("1");
    
    if (found != NULL) //si se encontro...
    {
      printf("2");
      printf("%c", found->character);
      curr = found->down; // avanzar al nodo encontrado
      if (i < strLen(word) - 1) // si no es la última letra
      { 
        printf("3");
        if (found->down != NULL) // si hay nivel inferior
        { 
          printf("4");
          found = findNodeInLevel(&(found->down), word[i+1]);
        } 
      }
      else // si es la última letra
      { 
        printf("5");
        if (found->word != NULL) 
        {
          printf("6");
          //free(found->word);
          found->word = NULL;
          found->end = 0;
          kt->totalWords--;
        }
      }
    } 
    else //si no se encontro
    {
      printf("\nno se encontro");
      printf("%c",found->character);
    }
  }
}

struct node* keysPredictFind(struct keysPredict* kt, char* word) {
  struct node* curr = kt->first;

  for(int i = 0; i < strLen(word); i++)
  {
    struct node* found = findNodeInLevel(&curr, word[i]);
    if (found != 0) //si se encontro...
    {
      curr = found; // avanzar al nodo encontrado
      if (i < strLen(word) - 1) // si no es la última letra
      { 
        if (curr->down != NULL) // si hay nivel inferior
        { 
          curr = findNodeInLevel(&curr->down, word[i+1]);
        }
        else //no hay nivel inferior, entonces, palabra no encontrada
        {
          return 0;
        }
      } 
      else // si es la última letra
      { 
        if (curr->word == word && curr->end == 1) 
        {
          return curr;
        }
        else //si no hay palabra en word, entonces, palabra no encontrada
        {
          return 0;
        }
      }
    } 
    else //no se encuentra la letra, entonces palabra no encontrada
    {
      return 0;
    }
  }
  return 0; //salio del bucle y no encontro la palabra
}

char** keysPredictRun(struct keysPredict* kt, char* partialWord, int* wordsCount) 
{/*

  struct node* curr = kt->first;
  char** = (char**)malloc(sizeof(char(*char)*wordsCount*strLen()) //cual seria el size que tendriamos que pedir?

  for(int i = 0; i < strLen(partialWord); i++)
  {
    struct node* found = findNodeInLevel(&curr, word[i]);
    if (found != 0) //si se encontro...
    {
      curr = found; // avanzar al nodo encontrado
      if (i < strLen(word) - 1) // si no es la última letra
      { 
        if (curr->down != NULL) // si hay nivel inferior
        { 
          curr = curr->down; 
        }
        else //no hay nivel inferior, entonces, prefijo no encontrada
        {
          return 0;
        }
      } 
    } 
    else //no se encuentra la letra, entonces prefijo no encontrada
    {
      return 0;
    }
  }
*/}

int keyPredictListAllCountWords(struct node* node){
  struct node* curr = node;
  int wordsCount = 0;

  if(!node){
    return wordsCount;
  }

  while(curr){
    if(curr->end == 1){
      wordsCount++;
    }
    wordsCount += keyPredictListAllCountWords(curr->down);
    curr = curr->next;
  }

  return wordsCount;
}

void keyPredictListAllAux(struct node* node, char** res, int* i){
  struct node* curr = node;

  if(!node) return;

  while(curr){
    if(curr->end == 1){
      res[*i] = strDup(curr->word);
      (*i)++;
    }
    keyPredictListAllAux(curr->down, res, i);
    curr = curr->next;
  }
}

char** keysPredictListAll(struct keysPredict* kt, int* wordsCount) {

  *wordsCount = keyPredictListAllCountWords(kt->first);
  char** res = (char**)malloc(sizeof(char*)*(*wordsCount));

  if(!res) return NULL; //verificamos asignacion de memoria

  int i = 0;
  keyPredictListAllAux(kt->first, res, &i);

  return res;
}


void keysPredictDeleteAux(struct node* node)
{
  if(!node) return;
   keysPredictDeleteAux(node->down);
   keysPredictDeleteAux(node->next);

   if (node->word != NULL){
     free(node->word);
   }
   free(node);
}


void keysPredictDelete(struct keysPredict* kt)
{
  if(!kt) return;

  keysPredictDeleteAux(kt->first);
  kt->first = NULL;
}




//#######################################################################################

int main() {
  /*
  1)1)
  int len = strLen("hola");
  printf("strLen devuelve %i", len);
  printf("\n");

  1)2)
  char* dup = strDup("hola");
  printf("strDup devuelve %s", dup);

  free(dup);
  return 0;


  2)1)
  struct keysPredict* kt = keysPredictNew();
  kt->first = nodeNew('a');
  kt->first->next = nodeNew('b');
  kt->first->next->next = nodeNew('c');

  // Caso 1: Nodo existe en la lista
  struct node* nodoEncontrado = findNodeInLevel(&(kt->first), 'a');
  if (nodoEncontrado != NULL) {
      printf("Nodo encontrado con caracter '%c'\n", nodoEncontrado->character);
  } else {
      printf("Nodo no encontrado\n");
  }

  // Caso 2: Nodo no existe en la lista
  nodoEncontrado = findNodeInLevel(&(kt->first), 'd');
  if (nodoEncontrado != NULL) {
      printf("Nodo encontrado con caracter '%c'\n", nodoEncontrado->character);
  } else {
      printf("Nodo no encontrado\n");
  }

  // Caso 3: Lista vacía
  struct node* listaVacia = NULL;
  nodoEncontrado = findNodeInLevel(&listaVacia, 'a');
  if (nodoEncontrado != NULL) {
      printf("Nodo encontrado con caracter '%c'\n", nodoEncontrado->character);
  } else {
      printf("Nodo no encontrado\n");
  }

  return 0;

  2)2)
      // Crear una lista vacía
    struct node* list = NULL;

    // Agregar nodos a la lista
    list = addSortedNewNodeInLevel(&list, 'b');
    list = addSortedNewNodeInLevel(&list, 'a');
    list = addSortedNewNodeInLevel(&list, 'c');
    list = addSortedNewNodeInLevel(&list, 'd');
    list = addSortedNewNodeInLevel(&list, 'a');
    list = addSortedNewNodeInLevel(&list, 'b');

    // Imprimir la lista para verificar que esté correcta
    while (list != NULL) {
        printf("%c ----- ", list->character);
        list = list->next;
    }
    printf("NULL\n");

    return 0;


    2)3)
    ----------

  */
  struct keysPredict* kt = keysPredictNew();
  struct node* node = nodeNew(*"s");
  struct node* node2 = nodeNew(*"i");
  struct node* node3 = nodeNew(*"n");
  struct node* node4 = nodeNew(*"o");

  node2->end = 1;
  node2->word = "si";
  node4->end = 1;
  node4->word = "no";

  kt->first = node;
  node->down = node2;

  node->next = node3;
  node3->down = node4;

  kt->totalWords = 2;
  kt->totalKeys = 4;

  printf("antes teniamos: %i\n", kt->totalWords);
  printf("las palabras que teniamos son: '%s' y '%s'\n", node2->word, node4->word);

  keysPredictRemoveWord(kt, "no");
  //struct node* found1 = findNodeInLevel(&node2, (*"i"));
  //printf("se encontro: %c", found1->character);

  printf("ahora tenemos: %i\n", kt->totalWords);
  printf("las palabras que tenemos ahora son: '%s' y '%s'\n", node2->word, node4->word);

  return 0;
}
